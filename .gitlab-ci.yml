.docker_login: &docker-login
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}

.docker_push: &docker-push
    - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}

.deploy_docker_compose: &deploy_docker_compose
  stage: deploy
  image: docker:27.0.3
  variables:
    DOCKER_HOST: "ssh://${SERVER_USER}@${SERVER_HOST}"
  before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - date '+%Y-%m-%d %H:%M:%S'
    - TZ='Europe/Moscow' date '+%Y-%m-%d %H:%M:%S'
  script:
    - export MAGNAT_VERSION="${CI_COMMIT_REF_SLUG} $(TZ='Europe/Moscow' date '+%Y-%m-%d %H:%M:%S')"
    - if [ -z `docker compose ps -q db` ] || [ -z `docker ps -q --no-trunc | grep $(docker compose ps -q db)` ];
      then docker compose up --no-deps -d; else docker compose up --no-deps -d client-backend; fi
  tags:
    - docker


#cache:
#  key: $CI_PROJECT_NAME
#  paths:
#    - vendor
#    - public
#    - rails

stages:
  - build
  - test
  - release
  - deploy

build:
  stage: build
  image: docker:27.0.3
  services:
    - name: docker:27.0.3-dind
      variables:
        DOCKER_HOST: tcp://docker:2375
        DOCKER_TLS_CERTDIR: ""
        DOCKER_DRIVER: overlay2
    - name: postgres:14.7-alpine
      alias: ${POSTGRES_HOST}
  variables:
    POSTGRES_HOST: postgresql
    POSTGRES_DB: my_app_gitlab
    POSTGRES_USER: my_app
    POSTGRES_PASSWORD: 'git!ab'
  script:
    - *docker-login
    - docker build --add-host=${POSTGRES_HOST}:$(getent hosts ${POSTGRES_HOST}  | awk '{ print $1 }') -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}
        --build-arg POSTGRES_HOST=${POSTGRES_HOST} --build-arg POSTGRES_DB=${POSTGRES_DB}
        --build-arg POSTGRES_USER=${POSTGRES_USER} --build-arg POSTGRES_PASSWORD=${POSTGRES_PASSWORD} .
    - *docker-push
  tags:
    - docker
  only:
    changes:
      - Dockerfile
      - Gemfile
      - Gemfile.lock
      - app/*
      - bin/*
      - config/*
      - db/*
      - lib/*
      - log/*
      - public/*
      - storage/*
      - test/*
      - vendor/*


deploy to dev:
  <<: *deploy_docker_compose
#  when:
#    manual
  environment:
    name: development
  only:
    - development
  needs:
    - job: build
      optional: true
  tags:
    - docker


deploy to prod:
  <<: *deploy_docker_compose
  when:
    manual
  environment:
    name: production
  only:
    - main
  needs:
    - job: build
      optional: true
  tags:
    - docker

